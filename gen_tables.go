// Copyright 2023 Takashi Takizawa. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build ignore
// +build ignore

package main

import (
	"bytes"
	"encoding/csv"
	"html/template"
	"log"
	"os"
	"path/filepath"
)

const dataDir = "_data"

type Data struct {
	SystemColors []Color
	Colors       []Color
}

type Color struct {
	Name             string
	HtmlHexColorCode string
	AnsiColorCode    string
}

func main() {
	colors := readColors("color.csv")
	systemColors := readColors("system-color.csv")
	data := Data{
		Colors:       colors,
		SystemColors: systemColors,
	}
	generate(data, templateCode, "tables.go")
	generate(data, templateText, "colors.md")
}

func readColors(filename string) []Color {
	var colors []Color
	f, err := os.Open(filepath.Join(dataDir, filename))
	if err != nil {
		log.Fatal(err)
	}
	r := csv.NewReader(f)
	records, err := r.ReadAll()
	if err != nil {
		log.Fatal(err)
	}
	for _, record := range records {
		c := Color{
			Name:             record[0],
			HtmlHexColorCode: record[1],
			AnsiColorCode:    record[2],
		}
		colors = append(colors, c)
	}
	return colors
}

func generate(data Data, text string, filename string) {
	b := bytes.NewBuffer([]byte{})
	tmpl, err := template.New("table").Parse(text)
	if err != nil {
		log.Fatal(err)
	}
	err = tmpl.Execute(b, data)
	if err != nil {
		log.Fatal(err)
	}

	f, err := os.CreateTemp(".", filename+".*")
	if err != nil {
		log.Fatal(err)
	}
	defer os.Remove(f.Name())

	f.Write(b.Bytes())
	f.Close()
	os.Rename(f.Name(), filename)
}

var templateCode = `// Copyright 2021-2023 Takashi Takizawa. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//
// Code generated by running \"go generate\" in github.com/ttkzw/go-color. DO NOT EDIT.

package color

// Color name
const (
	Default = Color(iota)

	/*
	 * 16 colors for system
	 */
{{range .SystemColors}}
	// {{.Name}} for system color
	System{{.Name}}
{{end}}

	/*
	 * 256 colors
	 */
{{range .Colors}}
	// {{.Name}}: HTML Hex Color Code {{.HtmlHexColorCode}}, Ansi 256-Color Code {{.AnsiColorCode}}
	{{.Name}}
{{end}}
)

var colorNames = []string{
	"Default",

	/*
	 * 16 colors for system
	 */
{{range .SystemColors}}
	"System{{.Name}}",{{end}}

	/*
	 * 256 colors
	 */
{{range .Colors}}
	"{{.Name}}",{{end}}
}

var colorEscapeSequences = [...]string{
	Default: "\x1b[39m",

	/*
	 * 16 colors for system
	 */
{{range .SystemColors}}
	System{{.Name}}: "\x1b[{{.AnsiColorCode}}m",{{end}}

	/*
	 * 256 colors
	 */
{{range .Colors}}
	{{.Name}}: "\x1b[38;5;{{.AnsiColorCode}}m",{{end}}
}
`

var templateText = `
# Supported colors

## System Colors
{{range .SystemColors}}
- <span style="color:{{.HtmlHexColorCode}};">System{{.Name}}</span>{{end}}

## Colors
{{range .Colors}}
- <span style="color:{{.HtmlHexColorCode}};">{{.Name}}</span>{{end}}

`
